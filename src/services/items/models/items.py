# src/services/items/models/items.py
# =======================================================================
# üìù FILE OVERVIEW
# =======================================================================
"""
This module defines the SQLModel models for the 'items' service.

These models are used for data validation, serialization, and database
interaction, including generating OpenAPI documentation for the item-related endpoints.
"""

# =======================================================================
# ‚öôÔ∏è 1. IMPORTS
# =======================================================================
from typing import Optional
from sqlmodel import Field, SQLModel


# =======================================================================
# üì¶ 2. SQLMODEL MODELS
# =======================================================================
class ItemBase(SQLModel):
    """
    Base model for an item, containing common fields.
    """

    name: str = Field(min_length=1, max_length=50, description="The name of the item.")
    description: Optional[str] = Field(
        default=None, max_length=300, description="An optional description of the item."
    )


class Item(ItemBase, table=True):
    """
    The complete SQLModel for an item, representing a database table.
    This is typically used for database operations and response bodies.
    """

    id: Optional[int] = Field(
        default=None, primary_key=True, description="The unique identifier of the item."
    )
    priority: int = Field(default=0, description="The priority of the item.")


class ItemCreate(ItemBase):
    """
    The model for creating a new item.
    It excludes the 'id' field, which is generated by the database.
    This is typically used for request bodies.
    """

    pass  # ItemBase already has the necessary fields


class ItemRead(ItemBase):
    """
    The model for reading an item, including its ID.
    This is typically used for response bodies when retrieving items.
    """

    id: int = Field(description="The unique identifier of the item.")
    priority: int = Field(description="The priority of the item.")
