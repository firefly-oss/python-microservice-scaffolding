components:
  schemas:
    Item:
      description: A full representation of an item.
      properties:
        createdAt:
          description: Timestamp when the item was created.
          format: date-time
          type: string
        description:
          description: Detailed description of the item.
          type: string
        id:
          description: Unique identifier for the item.
          format: uuid
          type: string
        name:
          description: Name of the item.
          type: string
        price:
          description: Price of the item.
          format: float
          type: number
        tags:
          description: Tags associated with the item.
          items:
            type: string
          type: array
        updatedAt:
          description: Timestamp when the item was last updated.
          format: date-time
          type: string
      required:
      - id
      - name
      - price
      type: object
    ItemCreate:
      description: Payload for creating a new item.
      properties:
        description:
          description: Detailed description of the item.
          type: string
        name:
          description: Name of the item.
          type: string
        price:
          description: Price of the item.
          format: float
          type: number
        tags:
          description: Tags to assign to the item.
          items:
            type: string
          type: array
      required:
      - name
      - price
      type: object
    ItemUpdate:
      description: Payload for updating an existing item. All fields are optional.
      properties:
        description:
          description: Updated description of the item.
          type: string
        name:
          description: Updated name of the item.
          type: string
        price:
          description: Updated price of the item.
          format: float
          type: number
        tags:
          description: Updated tags for the item.
          items:
            type: string
          type: array
      type: object
    healthGetResponse:
      example:
        status: ok
      properties:
        status:
          description: Health status message
          example: ok
          type: string
        version:
          description: Version of the service
          example: 1.0.0
          type: string
      required:
      - status
      type: object
info:
  contact:
    email: support@example.com
    name: API Support
  description: 'Generic OpenAPI specification for scaffolding a FastAPI application.
    Fill in the paths, schemas, and security details as needed.

    '
  title: FastAPI Scaffold API
  version: 0.1.0
openapi: 3.0.3
paths:
  /health:
    get:
      description: 'Returns a simple health check response to ensure the API is up
        and running.

        '
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthGetResponse'
          description: DIA retrieved successfully
      summary: Simple GET
      tags:
      - health
  /items:
    get:
      description: Retrieves a list of dummy items.
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Item'
                type: array
          description: Items retrieved successfully
      summary: List all items
      tags:
      - items
    post:
      description: Creates a new dummy item and returns it.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemCreate'
        description: Item to create
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
          description: Item created successfully
      summary: Create a new item
      tags:
      - items
  /items/{itemId}:
    delete:
      description: Deletes an existing item by its ID.
      parameters:
      - description: ID of the item to delete
        in: path
        name: itemId
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Item deleted successfully
        '404':
          description: Item not found
      summary: Delete an item
      tags:
      - items
    get:
      description: Retrieves a single item by its ID.
      parameters:
      - description: ID of the item to retrieve
        in: path
        name: itemId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
          description: Item retrieved successfully
        '404':
          description: Item not found
      summary: Get item by ID
      tags:
      - items
    put:
      description: Updates the details of an existing item by ID.
      parameters:
      - description: ID of the item to update
        in: path
        name: itemId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemUpdate'
        description: Updated item payload
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
          description: Item updated successfully
        '404':
          description: Item not found
      summary: Update an existing item
      tags:
      - items
  /openapi:
    get:
      description: 'Serves the pre-built OpenAPI YAML file for developers or API Gateway
        import.

        '
      responses:
        '200':
          content:
            application/x-yaml:
              schema:
                type: string
          description: The OpenAPI spec in YAML format
      summary: Download OpenAPI YAML
      tags:
      - health
servers:
- description: Local development server
  url: http://localhost:8000
- description: Production server
  url: https://api.example.com
tags: []
